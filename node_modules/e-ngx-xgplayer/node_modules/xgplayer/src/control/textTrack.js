import Player from '../player'
import '../style/player/texttrack.scss'

let textTrack = function () {
  let endedShow = false
  let player = this; let util = Player.util;
  let ul = util.createDom('xg-textTrack', '', {tabindex: 7}, 'xgplayer-textTrack'); let root = player.controls
  if (Player.sniffer.device === 'mobile') {
    player.config.textTrackActive = 'click'
  }
  let list = player.config.textTrack
  if (list && Array.isArray(list) && list.length > 0) {
    util.addClass(player.root, 'xgplayer-is-textTrack')
    let onCanplay = () => {
      let tmp = ['<ul>']
      tmp.push(`<li class=''}'>关闭</li>`)
      list.forEach(item => {
        tmp.push(`<li class='${item.default ? 'textTrack' : ''}'>${item.label}</li>`)
      })
      let controlText = player.config.lang && player.config.lang === 'zh-cn' ? '字幕' : 'Caption'
      tmp.push(`</ul><p class="name">${controlText}</p>`)

      let urlInRoot = root.querySelector('.xgplayer-textTrack')
      if (urlInRoot) {
        urlInRoot.innerHTML = tmp.join('')
        let cur = urlInRoot.querySelector('.name')
        if (!player.config.textTrackActive || player.config.textTrackActive === 'hover') {
          cur.addEventListener('mouseenter', (e) => {
            e.preventDefault()
            e.stopPropagation()
            util.addClass(player.root, 'xgplayer-textTrack-active')
            urlInRoot.focus()
          })
        }
      } else {
        ul.innerHTML = tmp.join('')
        let cur = ul.querySelector('.name')
        if (!player.config.textTrackActive || player.config.textTrackActive === 'hover') {
          cur.addEventListener('mouseenter', (e) => {
            e.preventDefault()
            e.stopPropagation()
            util.addClass(player.root, 'xgplayer-textTrack-active')
            ul.focus()
          })
        }
        root.appendChild(ul)
      }
    }
    util.once(player, 'canplay', onCanplay, 'destroy')
  }

  let onEnded = () => {
    let trackDoms = player.root.getElementsByTagName('Track')
    if(trackDoms && trackDoms[0] && trackDoms[0].track && trackDoms[0].track.mode !== 'hidden') {
      endedShow = true
      trackDoms[0].track.mode = 'hidden'
      let onPlaying = () => {
        if(endedShow) {
          endedShow = false
          trackDoms[0].track.mode = 'showing'
        }
      }
      util.once(player, 'playing', onPlaying, 'destroy');
    }
  }
  util.on(player, 'ended', onEnded, 'destroy');

  ['touchend', 'click'].forEach(item => {
    ul.addEventListener(item, function (e) {
      e.preventDefault()
      e.stopPropagation()
      let li = e.target || e.srcElement
      if (li && li.tagName.toLocaleLowerCase() === 'li') {
        Array.prototype.forEach.call(li.parentNode.childNodes, item => {
          util.removeClass(item, 'textTrack')
        })
        util.addClass(li, 'textTrack')
        let trackDoms = player.root.getElementsByTagName('Track')
        if (li.innerHTML === '关闭') {
          endedShow = false
          trackDoms[0].track.mode = 'hidden'
          util.removeClass(player.root, 'xgplayer-textTrack-active')
        } else {
          if (!util.hasClass(player.root, 'xgplayer-textTrack-active')) {
            util.addClass(player.root, 'xgplayer-textTrack-active')
          }
          trackDoms[0].track.mode = 'showing'

          list.some(item => {
            if (item.label === li.innerHTML) {
              trackDoms[0].src = item.src
              if (item.kind) {
                trackDoms[0].kind = item.kind
              }
              trackDoms[0].label = item.label
              if (item.srclang) {
                trackDoms[0].srclang = item.srclang
              }
              return true
            }
          })
          player.emit('textTrackChange', li.innerHTML)
          if (Player.sniffer.device === 'mobile') {
            util.removeClass(player.root, 'xgplayer-textTrack-active')
          }
        }
      } else if (player.config.textTrackActive === 'click' && li && (li.tagName.toLocaleLowerCase() === 'p' || li.tagName.toLocaleLowerCase() === 'span')) {
        if (Player.sniffer.device === 'mobile') {
          util.toggleClass(player.root, 'xgplayer-textTrack-active')
        } else {
          util.addClass(player.root, 'xgplayer-textTrack-active')
        }
        ul.focus()
      }
      player.emit('focus')
    })
  })

  ul.addEventListener('mouseleave', (e) => {
    e.preventDefault()
    e.stopPropagation()
    util.removeClass(player.root, 'xgplayer-textTrack-active')
  })

  function onBlur () {
    util.removeClass(player.root, 'xgplayer-textTrack-active')
  }
  util.on(player, 'blur', onBlur, 'destroy')
}

export default {
  name: 'textTrack',
  method: textTrack
}