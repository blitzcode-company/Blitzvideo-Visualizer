import Proxy from './proxy'
import util from './utils/util'
import Database from './utils/database'
import sniffer from './utils/sniffer'
import XgplayerTimeRange from './utils/xgplayerTimeRange'
import IntervalTimer from './utils/intervalTimer'
import Errors from './error'
import Draggabilly from 'draggabilly'
import './style/index.scss'
import {
  version
} from '../package.json'
import {PLAYER_EVENTS} from './playerEvents'
class Player extends Proxy {
  static isSupportMP4 () {
    return util.isSupportMP4()
  }
  constructor (options) {
    super(options)
    this.config = util.deepCopy({
      width: 600,
      height: 337.5,
      ignores: [],
      whitelist: [],
      lang: (document.documentElement.getAttribute('lang') || navigator.language || 'zh-cn').toLocaleLowerCase(),
      inactive: 3000,
      volume: 0.6,
      controls: true,
      controlsList: ['nodownload']
    }, options)
    this.version = version
    this.userTimer = null
    this.waitTimer = null
    this.database = new Database()
    this.history = []
    this.isProgressMoving = false
    this.root = util.findDom(document, `#${this.config.id}`)
    this.controls = util.createDom('xg-controls', '', {
      unselectable: 'on',
      onselectstart: 'return false'
    }, 'xgplayer-controls')
    if (!this.root) {
      let el = this.config.el
      if (el && el.nodeType === 1) {
        this.root = el
      } else {
        this.emit('error', new Errors('use', this.config.vid, {
          line: 32,
          handle: 'Constructor',
          msg: 'container id can\'t be empty'
        }))
        return false
      }
    }
    // this.rootBackup = util.copyDom(this.root)
    util.addClass(this.root, `xgplayer xgplayer-${sniffer.device} xgplayer-nostart ${this.config.controls ? '' : 'no-controls'}`)
    this.root.appendChild(this.controls)
    if (this.config.fluid) {
      this.root.style['max-width'] = '100%'
      this.root.style['width'] = '100%'
      this.root.style['height'] = '0'
      this.root.style['padding-top'] = `${this.config.height * 100 / this.config.width}%`

      this.video.style['position'] = 'absolute'
      this.video.style['top'] = '0'
      this.video.style['left'] = '0'
    } else {
      if (sniffer.device === 'pc' || options.width || options.height) {
        this.root.style.width = `${this.config.width}px`
        this.root.style.height = `${this.config.height}px`
      }
    }
    if (this.config.execBeforePluginsCall) {
      this.config.execBeforePluginsCall.forEach(item => {
        item.call(this, this)
      })
    }
    if (this.config.controlStyle && util.typeOf(this.config.controlStyle) === 'String') {
      let self = this
      window.fetch && window.fetch(self.config.controlStyle, {
        method: 'GET',
        headers: {
          Accept: 'application/json'
        }
      }).then(function (res) {
        if (res.ok) {
          res.json().then(function (obj) {
            for (var prop in obj) {
              if (obj.hasOwnProperty(prop)) {
                self.config[prop] = obj[prop]
              }
            }
            self.pluginsCall()
          })
        }
      }).catch(function (err) {
        console.log('Fetch错误:' + err)
      })
    } else {
      this.pluginsCall()
    }
    if(this.config.controlPlugins) {
      Player.controlsRun(this.config.controlPlugins, this)
    }
    this.ev.forEach((item) => {
      let evName = Object.keys(item)[0]
      let evFunc = this[item[evName]]
      if (evFunc) {
        util.on(this, evName, evFunc, 'destroy')
      }
    });
    ['focus', 'blur'].forEach(item => {
      util.on(this, item, this['on' + item.charAt(0).toUpperCase() + item.slice(1)], 'destroy')
    })
    let player = this
    this.mousemoveFunc = function () {
      player.emit('focus')
      if (!player.config.closeFocusVideoFocus) {
        player.video.focus()
      }
    }
    this.root.addEventListener('mousemove', this.mousemoveFunc)
    this.playFunc = function () {
      player.emit('focus')
      if (!player.config.closePlayVideoFocus) {
        player.video.focus()
      }
    }
    util.once(player, 'play', this.playFunc)

    setTimeout(() => {
      this.emit('ready')
    }, 0)
    if (this.config.videoInit) {
      if (util.hasClass(this.root, 'xgplayer-nostart')) {
        this.start()
      }
    }

    util.once(player, 'destroy', () => {
      player.root.removeEventListener('mousemove', player.mousemoveFunc)
    })
  }

  start (url = this.config.url) {
    let root = this.root
    let player = this
    if (!url) {
      this.emit('urlNull')
    }
    this.canPlayFunc = () => {
      let playPromise = player.video.play()
      if (playPromise !== undefined && playPromise) {
        playPromise.then(function () {
          util.removeClass(player.root, 'xgplayer-nostart')
          player.emit('autoplay started')
        }).catch(function (e) {
          if (e.name === 'NotAllowedError') {
            player.emit('autoplay was prevented')
            Player.util.addClass(player.root, 'xgplayer-is-autoplay')
          } 
        })
      }
    }
    const setMediaSrc = url => {
      if (util.typeOf(url) !== 'Array') {
        if (util.typeOf(url) === 'String' && url.indexOf('blob:') > -1 && url === this.video.src) {
          // 在Chromium环境下用mse url给video二次赋值会导致错误
        } else {
          this.video.src = url
        }  
      } else if(url && url.length > 0) {
        url.forEach(item => {
          this.video.appendChild(util.createDom('source', '', {
            src: `${item.src}`,
            type: `${item.type || ''}`
          }))
        })
      }
      if (this.config.autoplay) {
        util.on(this, 'canplay', this.canPlayFunc)
      }
      this.video.load()
      if(root && !root.querySelector('video') && this.video && this.video.nodeType === 1) {
        root.insertBefore(this.video, root.firstChild)
      }
      setTimeout(() => {
        this.emit('complete')
      }, 1)
    }
    if(typeof player.config.beforeStartRun === 'function') {
      player.config.beforeStartRun().then(() => {
        setMediaSrc(url)
      })
    } else {
      setMediaSrc(url)
    }
  }

  seek (time) {
    if(this.ended && typeof this.replay === 'function') {
      this.replay(time)
    } else {
      this.currentTime = time
    }
  }

  reload () {
    this.video.load()
    this.reloadFunc = () => {
      this.play().catch(err => {})
    }
    util.once(this, 'loadeddata', this.reloadFunc)
  }

  destroy (isDelDom = true) {
    clearInterval(this.bulletResizeTimer)
    for (let k in this._interval) {
      clearInterval(this._interval[k])
      this._interval[k] = null
    }
    if (this.danmu) {
      this.danmu.destroy()
    }
    clearTimeout(this.userTimer)
    clearTimeout(this.waitTimer)
    clearTimeout(this.sliderTimer)

    function destroyFunc () {
      this.emit('destroy')
      // this.root.id = this.root.id + '_del'
      // parentNode.insertBefore(this.rootBackup, this.root)

      // fix video destroy https://stackoverflow.com/questions/3258587/how-to-properly-unload-destroy-a-video-element
      this.video.removeAttribute('src') // empty source
      this.video.load()
      if (isDelDom) {
        // parentNode.removeChild(this.root)
        this.root.innerHTML = ''
        this.root.className = ''
      }
      for (let k in this) {
        // if (k !== 'config') {
        delete this[k]
        // }
      }
      this.off('pause', destroyFunc)
      this.emit('destroyEnd')
    }

    if (!this.paused) {
      this.pause()
      this.once('pause', destroyFunc)
    } else {
      destroyFunc.call(this)
    }
    super.destroy()
  }

  replay (currentTime = 0) {
    let self = this
    let _replay = this._replay
    // ie9 bugfix
    util.removeClass(this.root, 'xgplayer-ended')
    if (_replay && _replay instanceof Function) {
      _replay(currentTime)
    } else {
      this.currentTime = currentTime
      this.play().catch(err => {})
    }
  }

  pluginsCall () {
    let self = this
    if (Player.plugins) {
      let ignores = this.config.ignores
      Object.keys(Player.plugins).forEach(name => {
        let descriptor = Player.plugins[name]
        if (!ignores.some(item => name === item)) {
          if (['pc', 'tablet', 'mobile'].some(type => type === name)) {
            if (name === sniffer.device) {
              setTimeout(() => {
                descriptor.call(self, self)
              }, 0)
            }
          } else {
            descriptor.call(this, this)
          }
        }
      })
    }
  }

  getPIP (width = 320, height = 180) {
    let ro = this.root.getBoundingClientRect()
    let Top = ro.top
    let Left = ro.left
    let dragLay = util.createDom('xg-pip-lay', '<div></div>', {}, 'xgplayer-pip-lay')
    this.root.appendChild(dragLay)
    let dragHandle = util.createDom('xg-pip-drag', '<div class="drag-handle"><span>点击按住可拖动视频</span></div>', {tabindex: 9}, 'xgplayer-pip-drag')
    this.root.appendChild(dragHandle)
    let draggie = new Draggabilly('.xgplayer', {
      handle: '.drag-handle'
    })
    util.addClass(this.root, 'xgplayer-pip-active')

    this.root.style.width = `${width}px`
    this.root.style.height = `${height}px`

    this.root.style.right = 0
    this.root.style.bottom = '200px'
    this.root.style.top = ''
    this.root.style.left = ''
    if (this.config.fluid) {
      this.root.style['padding-top'] = ''
    }
    let player = this;
    ['click', 'touchstart'].forEach(item => {
      dragLay.addEventListener(item, function (e) {
        e.preventDefault()
        e.stopPropagation()
        player.exitPIP()
        player.root.style.top = `${Top}px`
        player.root.style.left = `${Left}px`
      })
    })
  }

  exitPIP () {
    util.removeClass(this.root, 'xgplayer-pip-active')
    this.root.style.right = ''
    this.root.style.bottom = ''
    this.root.style.top = ''
    this.root.style.left = ''

    if (this.config.fluid) {
      this.root.style['width'] = '100%'
      this.root.style['height'] = '0'
      this.root.style['padding-top'] = `${this.config.height * 100 / this.config.width}%`
    } else {
      if (this.config.width) {
        if (typeof this.config.width !== 'number') {
          this.root.style.width = this.config.width
        } else {
          this.root.style.width = `${this.config.width}px`
        }
      }
      if (this.config.height) {
        if (typeof this.config.height !== 'number') {
          this.root.style.height = this.config.height
        } else {
          this.root.style.height = `${this.config.height}px`
        }
      }
    }
  }

  clearWaitTimer () {
    if (!this.waitTimer) {
      return
    }
    window.clearTimeout(this.waitTimer)
    this.waitTimer = null
  }

  onFocus () {
    let player = this
    if(util.hasClass(this.root, 'xgplayer-inactive')) {
      player.emit('controlShow')
    }
    util.removeClass(this.root, 'xgplayer-inactive')
    if (player.userTimer) {
      clearTimeout(player.userTimer)
    }
    player.userTimer = setTimeout(function () {
      player.emit('blur')
    }, player.config.inactive)
  }

  onBlur () {
    // this.video.blur()
    if (!this.paused && !this.ended) {
      if(!util.hasClass(this.root, 'xgplayer-inactive')) {
        this.emit('controlHide')
      }
      util.addClass(this.root, 'xgplayer-inactive')
    }
  }

  onPlay () {
    util.addClass(this.root, 'xgplayer-playing')
    util.removeClass(this.root, 'xgplayer-pause')
  }

  onPause () {
    util.addClass(this.root, 'xgplayer-pause')
    if (this.userTimer) {
      clearTimeout(this.userTimer)
    }
    this.emit('focus')
  }

  onEnded () {
    util.addClass(this.root, 'xgplayer-ended')
    util.removeClass(this.root, 'xgplayer-playing')
    util.removeClass(this.root, 'xgplayer-isloading')
  }

  onTimeupdate () {
    // loading状态下必须有足够的播放buffer才清楚loading
    if (this.isLoading || (this.waitTimer && !this.isSeeking)) {
      if (this.checkBuffer()) {
        this._handleResumeFromWating();
        this.clearWaitTimer()
        util.removeClass(this.root, 'xgplayer-isloading')
        this.isLoading = false
      }
    }
    // 在没有开始播放且当前是暂停状态 不去除xgplayer-nostart, 兼容safari下无法自动播放但是设置了currentTime的情况
    if (!this._hasStart && this.paused) {
      util.removeClass(this.root, 'xgplayer-is-enter xgplayer-start-appear')
    } else {
      util.removeClass(this.root, 'xgplayer-is-enter xgplayer-nostart xgplayer-start-appear')
    }
  }

  onSeeking () {
    this.isSeeking = true
    this.onWaiting()
  }

  onSeeked () {
    this._handleResumeFromWating()
    this.isSeeking = false
    this.isLoading = false
    // for ie,playing trigger before waiting
    if (this.waitTimer) {
      this.clearWaitTimer()
    }
    util.removeClass(this.root, 'xgplayer-isloading')
  }

  onWaiting () {
    // 未开始播放且暂停状态不显示loading
    if (!this._hasStart && this.paused) {
      return
    }
    let self = this
    if (self.waitTimer) {
      this.clearWaitTimer()
      this.isLoading = false
    }
    self.waitTimer = setTimeout(function () {
      util.addClass(self.root, 'xgplayer-isloading')
      self.emit(PLAYER_EVENTS.PLAYER_WAITING)
      self.isLoading = true
      self.clearWaitTimer()
    }, 800)
  }

  _handleResumeFromWating(){
    if(this.isLoading){
      this.emit(PLAYER_EVENTS.PLAYER_RESUME)
    }
  }

  onPlaying () {
    this._handleResumeFromWating()
    this.isSeeking = false
    this.isLoading = false
    if (this.waitTimer) {
      this.clearWaitTimer()
    }
    util.removeClass(this.root, 'xgplayer-isloading xgplayer-pause xgplayer-ended xgplayer-is-error xgplayer-replay')
    util.addClass(this.root, 'xgplayer-playing')
  }

  /**
   * 检查当前缓存是否足够播放currenTime
   */
  checkBuffer () {
    const buffered = this.video.buffered
    const currentTime = this.currentTime
    const len = buffered.length
    for (let i = 0; i < len; i++) {
      if (buffered.start(i) <= currentTime && buffered.end(i) > currentTime) {
        return true
      }
    }
    return false
  }

  static install (name, descriptor) {
    if (!Player.plugins) {
      Player.plugins = {}
    }
    Player.plugins[name] = descriptor
  }

  static controlsRun (controlLst, context) {
    controlLst.forEach(function(control) {
      control.method.call(context)
    })
  }
}

Player.util = util
Player.IntervalTimer = IntervalTimer
Player.sniffer = sniffer
Player.Errors = Errors
Player.PLAYER_EVENTS = PLAYER_EVENTS
Player.XgplayerTimeRange = XgplayerTimeRange
export default Player
