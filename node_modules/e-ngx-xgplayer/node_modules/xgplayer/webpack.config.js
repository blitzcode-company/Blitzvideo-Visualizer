const {BundleAnalyzerPlugin} = require('webpack-bundle-analyzer')
const UglifyJsPlugin = require('uglifyjs-webpack-plugin')
const polyfill = []
const argv = require('yargs').argv;
const moduleConfig = {
  rules: [{
    test: /\.js$/,
    loader: 'babel-loader'
  }, {
    test: /\.scss$/,
    use: [
      'style-loader',
      {
        loader: 'css-loader',
        options: {
          importLoaders: 1,
          minimize: true
        }
      },
      'postcss-loader',
      'sass-loader'
    ]
  }]
};
const optimizationConfig = {
  minimize: true,
  minimizer: [
    new UglifyJsPlugin({
      test: [/\.(js|jsx)$/],
      exclude: [/node_modules/],
      parallel: true,
      sourceMap: true,
      uglifyOptions: {
        warnings: false,
        compress: {
          inline: 1,
          keep_fnames: true
        },
        mangle: {
          keep_fnames: true
        }
      }
    })
  ],
};

const umd = {
  entry: {
    index: polyfill.concat(['./src/index.js']),
    player: polyfill.concat(['./src/player.js']),
    'simple_player': polyfill.concat(['./src/simplePlayer.js'])
  },
  devtool: 'source-map',
  output: {
    path: `${__dirname}/dist`,
    filename: '[name].js',
    library: 'xgplayer',
    libraryTarget: 'umd'
  },
  mode: 'production',
  module: moduleConfig,
  optimization: optimizationConfig
}

argv.analyze && (umd.plugins = [new BundleAnalyzerPlugin()])

const client = {
  entry: {
    index: polyfill.concat(['./src/index.js']),
    player: polyfill.concat(['./src/player.js']),
    'simple_player': polyfill.concat(['./src/simplePlayer.js'])
  },
  devtool: 'source-map',
  output: {
    path: `${__dirname}/browser`,
    filename: '[name].js',
    library: 'Player',
    libraryTarget: 'window'
  },
  mode: 'production',
  module: moduleConfig,
  optimization: optimizationConfig
}

const umd_controls = {
  entry: {
    controls: polyfill.concat(['./src/controls.js'])
  },
  devtool: 'source-map',
  output: {
    path: `${__dirname}/dist`,
    filename: '[name].js',
    library: 'xgplayer',
    libraryTarget: 'umd'
  },
  mode: 'production',
  module: moduleConfig,
  optimization: optimizationConfig
}

const client_controls = {
  entry: {
    controls: polyfill.concat(['./src/controls.js'])
  },
  devtool: 'source-map',
  output: {
    path: `${__dirname}/browser`,
    filename: '[name].js',
    library: 'PlayerControls',
    libraryTarget: 'window'
  },
  mode: 'production',
  module: moduleConfig,
  optimization: optimizationConfig
}

module.exports = [umd, client, umd_controls, client_controls]
