"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Player = require("xgplayer");
var ENgxXGPlayerComponent = (function () {
    function ENgxXGPlayerComponent() {
        this.ready = new core_1.EventEmitter();
        this.startplay = new core_1.EventEmitter();
        this.playing = new core_1.EventEmitter();
        this.paused = new core_1.EventEmitter();
        this.ended = new core_1.EventEmitter();
        this.error = new core_1.EventEmitter();
        this.seeking = new core_1.EventEmitter();
        this.seeked = new core_1.EventEmitter();
        this.timeupdate = new core_1.EventEmitter();
        this.waiting = new core_1.EventEmitter();
        this.canplay = new core_1.EventEmitter();
        this.canplaythrough = new core_1.EventEmitter();
        this.durationchange = new core_1.EventEmitter();
        this.volumechange = new core_1.EventEmitter();
        this.complete = new core_1.EventEmitter();
        this.destroy = new core_1.EventEmitter();
    }
    Object.defineProperty(ENgxXGPlayerComponent.prototype, "options", {
        set: function (value) {
            this.defaultOptions = {
                el: this.playerElemRef.nativeElement
            };
            this.defaultOptions = Object.assign(this.defaultOptions, value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ENgxXGPlayerComponent.prototype, "plugins", {
        set: function (value) {
            value.forEach(function (plugin) {
                Player.install(plugin.name, plugin.handler);
            });
        },
        enumerable: true,
        configurable: true
    });
    ENgxXGPlayerComponent.prototype.ngOnInit = function () {
        this.player = new Player(this.defaultOptions);
        this.initEvents();
    };
    ENgxXGPlayerComponent.prototype.ngOnDestroy = function () {
        this.player.destroy();
    };
    /**
     * 初始化事件
     */
    /**
         * 初始化事件
         */
    ENgxXGPlayerComponent.prototype.initEvents = /**
         * 初始化事件
         */
    function () {
        var _this = this;
        this.player.once('ready', function () {
            _this.ready.emit(_this);
        });
        this.player.once('complete', function () {
            _this.complete.emit(_this);
        });
        this.player.on('play', function (evt) {
            _this.startplay.emit(evt);
        });
        this.player.on('playing', function (evt) {
            _this.playing.emit(evt);
        });
        this.player.on('pause', function (evt) {
            _this.paused.emit(evt);
        });
        this.player.on('ended', function (evt) {
            _this.ended.emit(evt);
        });
        this.player.on('error', function (evt) {
            _this.error.emit(evt);
        });
        this.player.on('seeking', function (evt) {
            _this.seeking.emit(evt);
        });
        this.player.on('seeked', function (evt) {
            _this.seeked.emit(evt);
        });
        this.player.on('timeupdate', function (evt) {
            _this.timeupdate.emit(evt);
        });
        this.player.on('waiting', function (evt) {
            _this.waiting.emit(evt);
        });
        this.player.on('canplay', function (evt) {
            _this.canplay.emit(evt);
        });
        this.player.on('canplaythrough', function (evt) {
            _this.canplaythrough.emit(evt);
        });
        this.player.on('durationchange', function (evt) {
            _this.durationchange.emit(evt);
        });
        this.player.on('volumechange', function (evt) {
            _this.volumechange.emit(evt);
        });
        this.player.once('destroy', function () {
            _this.destroy.emit();
        });
    };
    /**
     * 启动播放器，一般都是播放器内部隐式调用，主要功能是将 video 添加到 DOM
     * @param {string} url 视频地址
     */
    /**
         * 启动播放器，一般都是播放器内部隐式调用，主要功能是将 video 添加到 DOM
         * @param {string} url 视频地址
         */
    ENgxXGPlayerComponent.prototype.start = /**
         * 启动播放器，一般都是播放器内部隐式调用，主要功能是将 video 添加到 DOM
         * @param {string} url 视频地址
         */
    function (url) {
        this.player.start(url);
    };
    /**
     * 播放视频
     */
    /**
         * 播放视频
         */
    ENgxXGPlayerComponent.prototype.play = /**
         * 播放视频
         */
    function () {
        this.player.play();
    };
    /**
     * 播放器重播视频，重播的组件就调用了这个方法，支持 beforeReplay 钩子，如果 beforeReplay 返回为 false 阻止重播动作。
     */
    /**
         * 播放器重播视频，重播的组件就调用了这个方法，支持 beforeReplay 钩子，如果 beforeReplay 返回为 false 阻止重播动作。
         */
    ENgxXGPlayerComponent.prototype.replay = /**
         * 播放器重播视频，重播的组件就调用了这个方法，支持 beforeReplay 钩子，如果 beforeReplay 返回为 false 阻止重播动作。
         */
    function () {
        this.player.replay();
    };
    /**
     * 暂停视频
     */
    /**
         * 暂停视频
         */
    ENgxXGPlayerComponent.prototype.pause = /**
         * 暂停视频
         */
    function () {
        this.player.pause();
    };
    /**
     * 重新加载视频
     */
    /**
         * 重新加载视频
         */
    ENgxXGPlayerComponent.prototype.reload = /**
         * 重新加载视频
         */
    function () {
        this.player.reload();
    };
    /**
     * 检测您的浏览器是否能播放不同类型的视频
     * @param {string} mimeType 检测的类型
     * @returns {boolean}
     */
    /**
         * 检测您的浏览器是否能播放不同类型的视频
         * @param {string} mimeType 检测的类型
         * @returns {boolean}
         */
    ENgxXGPlayerComponent.prototype.canPlayType = /**
         * 检测您的浏览器是否能播放不同类型的视频
         * @param {string} mimeType 检测的类型
         * @returns {boolean}
         */
    function (mimeType) {
        return this.player.canPlayType(mimeType);
    };
    /**
     * 返回当前的缓冲片段时间范围，start表示缓冲起始时间，end表示缓存截止时间
     * @returns [start,end]
     */
    /**
         * 返回当前的缓冲片段时间范围，start表示缓冲起始时间，end表示缓存截止时间
         * @returns [start,end]
         */
    ENgxXGPlayerComponent.prototype.getBufferedRange = /**
         * 返回当前的缓冲片段时间范围，start表示缓冲起始时间，end表示缓存截止时间
         * @returns [start,end]
         */
    function () {
        return this.player.getBufferedRange();
    };
    ENgxXGPlayerComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'e-ngx-xgplayer',
                    template: "\n   <div class=\"e-ngx-xgplayer\" #playerElem></div>\n    ",
                    styles: ["\n\n    "]
                },] },
    ];
    /** @nocollapse */
    ENgxXGPlayerComponent.ctorParameters = function () { return []; };
    ENgxXGPlayerComponent.propDecorators = {
        "playerElemRef": [{ type: core_1.ViewChild, args: ['playerElem',] },],
        "options": [{ type: core_1.Input },],
        "plugins": [{ type: core_1.Input },],
        "ready": [{ type: core_1.Output },],
        "startplay": [{ type: core_1.Output },],
        "playing": [{ type: core_1.Output },],
        "paused": [{ type: core_1.Output },],
        "ended": [{ type: core_1.Output },],
        "error": [{ type: core_1.Output },],
        "seeking": [{ type: core_1.Output },],
        "seeked": [{ type: core_1.Output },],
        "timeupdate": [{ type: core_1.Output },],
        "waiting": [{ type: core_1.Output },],
        "canplay": [{ type: core_1.Output },],
        "canplaythrough": [{ type: core_1.Output },],
        "durationchange": [{ type: core_1.Output },],
        "volumechange": [{ type: core_1.Output },],
        "complete": [{ type: core_1.Output },],
        "destroy": [{ type: core_1.Output },],
    };
    return ENgxXGPlayerComponent;
}());
exports.ENgxXGPlayerComponent = ENgxXGPlayerComponent;
//# sourceMappingURL=e-ngx-xgplayer.component.js.map